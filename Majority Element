Naive solution by using hashing but it takes o(n) time and space complexity. so we should use another algorithm name Boyer-Moore Algorithm 
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        h={}
        for i in range(len(nums)):
            if nums[i] in h:
                h[nums[i]]+=1
            else:
                h[nums[i]]=1
        
        for key in h:
            if h[key]>len(nums)//2:
                return key
Boyer-Moore Algorithm with O(n) time complexity but O(1) space complexity
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        m=-1
        count=0
        for i in range(len(nums)):
            if count==0:
                m=nums[i]
                count=1
            else:
                if m==nums[i]:
                    count+=1
                else:
                    count-=1
        count=0
        for i in range(len(nums)):
            if nums[i]==m:
                count+=1
        if count>len(nums)//2:
            return m
        else:
            return -1
